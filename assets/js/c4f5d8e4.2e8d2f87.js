"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[634],{6467:(e,l,n)=>{n.r(l),n.d(l,{default:()=>b});var i=n(4164),s=n(8774),t=n(4586),a=n(781),r=n(1107);const c={features:"features_t9lD",featureSvg:"featureSvg_GfXr"};var o=n(1432),d=n(7293),h=n(4848);const u=[{title:"Declarative",description:(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)("ul",{children:[(0,h.jsx)("li",{children:"A declarative reactive programming library for C++"}),(0,h.jsxs)("li",{children:["Define ",(0,h.jsx)("code",{children:"cells"})," for your data"]}),(0,h.jsx)("li",{children:"Express complex logic as functions of cells"})]}),(0,h.jsx)(o.A,{language:"cpp",children:"// Define cells\nauto a = live_cells::variable(0);\nauto b = live_cells::variable(1);\n\n// Define a function of a cell\nauto sum = live_cells::watch([=] {\n    return a() + b();\n});\n"})]})},{title:"Reactive",description:(0,h.jsxs)(h.Fragment,{children:[(0,h.jsx)(o.A,{language:"cpp",children:'auto watcher = live_cells::watch([=] {\n    if (sum() > 100) {\n        std::cout << "Sum exceeded 100!!\\n";\n    }\n});\n\na.value(20);\nb.value(90); // Prints: Sum exceeded 100!!!'}),(0,h.jsxs)("ul",{children:[(0,h.jsx)("li",{children:"Define observers on your cells"}),(0,h.jsx)("li",{children:"Observers called automatically when cell values change"}),(0,h.jsx)("li",{children:"Observers are self-subscribing"}),(0,h.jsx)("li",{children:"React to any event or data change with minimal boilerplate"})]})]})},{title:"Simple, powerful and maintainable",description:(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)("ul",{children:[(0,h.jsx)("li",{children:"You only need to learn one basic building block \u2014 the cell"}),(0,h.jsx)("li",{children:"No need to worry about adding and removing event listeners or callbacks"}),(0,h.jsx)("li",{children:"No need to implement complicated interfaces or subclasses"}),(0,h.jsx)("li",{children:"Powerful enough to express any application logic"}),(0,h.jsx)("li",{children:"Express your application logic without it buried in layers of event handling and state synchronization code"})]}),(0,h.jsx)(o.A,{language:"cpp",children:"auto a = live_cells::variable(...);\nauto b = live_cells::computed(...);\nauto w = live_cells::watch(...);\n\n// That's all you have to learn"})]})}];function x(e){let{Svg:l,title:n,description:i}=e;return(0,h.jsx)("div",{children:(0,h.jsxs)("div",{className:"text--center padding-horiz--md",children:[(0,h.jsx)(r.A,{as:"h3",children:n}),(0,h.jsx)("p",{className:"text--left",children:i})]})})}function j(){return(0,h.jsx)("section",{className:c.features,children:(0,h.jsxs)("div",{className:"container",children:[(0,h.jsx)(d.A,{type:"caution",children:"This software is still in beta."}),(0,h.jsx)("div",{className:"column;",children:u.map(((e,l)=>(0,h.jsx)(x,{...e},l)))})]})})}const m={heroBanner:"heroBanner_qdFl",buttons:"buttons_AeoN"};function v(){const{siteConfig:e}=(0,t.A)();return(0,h.jsx)("header",{className:(0,i.A)("hero hero--primary",m.heroBanner),children:(0,h.jsxs)("div",{className:"container",children:[(0,h.jsx)(r.A,{as:"h1",className:"hero__title",children:e.title}),(0,h.jsx)("p",{className:"hero__subtitle",children:e.tagline}),(0,h.jsx)("div",{className:m.buttons,children:(0,h.jsx)(s.A,{className:"button button--secondary button--lg",to:"/docs/intro",children:"Get Started"})})]})})}function b(){const{siteConfig:e}=(0,t.A)();return(0,h.jsxs)(a.A,{title:`${e.title}`,description:"Live Cells Library Documentation",children:[(0,h.jsx)(v,{}),(0,h.jsx)("main",{children:(0,h.jsx)(j,{})})]})}}}]);